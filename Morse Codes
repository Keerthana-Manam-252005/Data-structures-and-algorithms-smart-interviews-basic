Morse Codes:

Given an array of strings A, where each string can be formed by combining the Morse code representation of individual letters.
[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]
The full table for the 26 letters of the English alphabet is given above. For example, "abc" can be written as ".--...-.-.", which is the concatenation of ".-", "-...", and "-.-.". 
We will call such a concatenation the transformation of a word. Print the number of different transformations among all A we have.

Input Format
First line of input contains the size of the array N. The second line of input contains array of strings separated by spaces.

Output Format
Print the number of different transformations among all A we have.

Constraints
1 ≤ A.length ≤ 100
1 ≤ A[i].length ≤ 12
A[i] consists of lowercase English letters.

Example
Input
4
abc bze abnn xyz

Output
3

Explanation
"abc" -> ".--...-.-."
"bze" -> "-...--..."
"abnn" -> ".--...-.-."
"xyz" -> "-..--.----.."
There are 3 different transformations: ".--...-.-." , "-...--..." and "-..--.----..".

code:
def Morse_codes(N,A):
    codes = ['.-', '-...', '-.-.', '-..', '.', '..-.', '--.', '....', '..',
    '.---', '-.-', '.-..', '--', '-.', '---', '.--.', '--.-', '.-.', '...',
    '-', '..-', '...-', '.--', '-..-', '-.--', '--..']
    unique_transormation = set()
    for word in A:
        transormation = ""
        for ch in word:
            transormation += codes[ord(ch)-ord('a')]
        unique_transormation.add(transormation)
    return len(unique_transormation)
N = int(input())
A = input().split()
print(Morse_codes(N,A))
